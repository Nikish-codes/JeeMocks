{"version":3,"sources":["components/MockTest.js","components/Result.js","components/Homepage.js","components/QuestionBank.js","utils/questionLoader.js","App.js","index.js"],"names":["MockTest","_ref","questions","onTestEnd","currentQuestion","setCurrentQuestion","useState","selectedAnswer","setSelectedAnswer","timeLeft","setTimeLeft","userResponses","setUserResponses","markedQuestions","setMarkedQuestions","handleTestEnd","useCallback","score","reduce","acc","response","index","correct_answer","useEffect","timer","setInterval","prevTime","clearInterval","handleAnswerChange","event","parseInt","target","value","length","React","createElement","question","progressPercentage","className","question_value","text","img_url","src","alt","options","map","option","key","type","id","name","checked","onChange","htmlFor","onClick","prevQuestion","handleNextQuestion","prevResponses","newResponses","handleMarkQuestion","prevMarked","includes","filter","Math","floor","toString","padStart","style","width","_","questionIndex","handleQuestionPaletteClick","undefined","Result","totalQuestions","onGoBack","percentage","toFixed","solution","Homepage","navigate","useNavigate","selectedTest","setSelectedTest","showTest","setShowTest","showResult","setShowResult","setScore","Object","keys","test","handleTestSelect","testScore","responses","handleGoBack","QuestionBank","selectedSubject","setSelectedSubject","selectedTopic","setSelectedTopic","filteredQuestions","setFilteredQuestions","filtered","values","flat","subject","topic","Fragment","question_number","loadQuestions","async","response2024","fetch","data2024","json","response2023","data2023","error","console","App","setQuestions","loadedQuestions","fetchQuestions","Router","basename","process","Link","to","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8c58849e.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './MockTest.css';\r\n\r\nfunction MockTest({ questions, onTestEnd }) {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(1800); // 30 minutes in seconds\r\n  const [userResponses, setUserResponses] = useState([]);\r\n  const [markedQuestions, setMarkedQuestions] = useState([]);\r\n\r\n  // Move handleTestEnd here (above its first use)\r\n  const handleTestEnd = useCallback(() => {\r\n    const score = userResponses.reduce((acc, response, index) => {\r\n      if (response === questions[index].correct_answer) {\r\n        return acc + 1;\r\n      }\r\n      return acc;\r\n    }, 0);\r\n\r\n    onTestEnd(score, userResponses);\r\n  }, [userResponses, questions, onTestEnd]);\r\n\r\n  // Use useEffect with handleTestEnd\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setTimeLeft(prevTime => prevTime - 1);\r\n    }, 1000);\r\n\r\n    if (timeLeft === 0) {\r\n      clearInterval(timer);\r\n      handleTestEnd();  // Now handleTestEnd is defined before being used\r\n    }\r\n\r\n    return () => clearInterval(timer);\r\n  }, [timeLeft, handleTestEnd]);\r\n\r\n  const handleAnswerChange = (event) => {\r\n    setSelectedAnswer(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    setUserResponses(prevResponses => {\r\n      const newResponses = [...prevResponses];\r\n      newResponses[currentQuestion] = selectedAnswer;\r\n      return newResponses;\r\n    });\r\n\r\n    setSelectedAnswer(null);\r\n    setCurrentQuestion(prevQuestion => prevQuestion + 1);\r\n  };\r\n\r\n  const handleQuestionPaletteClick = (questionIndex) => {\r\n    setCurrentQuestion(questionIndex);\r\n    setSelectedAnswer(userResponses[questionIndex]);\r\n  };\r\n\r\n  const handleMarkQuestion = () => {\r\n    setMarkedQuestions(prevMarked => {\r\n      if (prevMarked.includes(currentQuestion)) {\r\n        return prevMarked.filter(index => index !== currentQuestion);\r\n      } else {\r\n        return [...prevMarked, currentQuestion];\r\n      }\r\n    });\r\n  };\r\n\r\n  if (!questions || questions.length === 0) {\r\n    return <div>Loading questions...</div>;\r\n  }\r\n\r\n  const question = questions[currentQuestion];\r\n  const progressPercentage = (currentQuestion / (questions.length - 1)) * 100;\r\n\r\n  return (\r\n    <div className=\"mock-test-container\">\r\n      <div className=\"question-section\">\r\n        <div className=\"question-count\">\r\n          <span>Question {currentQuestion + 1}</span>/{questions.length}\r\n        </div>\r\n        <div className=\"question-text\">{question.question_value.text}</div>\r\n        {question.question_value.img_url && (\r\n          <img src={question.question_value.img_url} alt=\"Question Illustration\" />\r\n        )}\r\n      </div>\r\n      <div className=\"answer-section\">\r\n        {question.options.map((option, index) => (\r\n          <div key={index}>\r\n            <input\r\n              type=\"radio\"\r\n              id={`option${index}`}\r\n              name=\"answer\"\r\n              value={index}\r\n              checked={selectedAnswer === index}\r\n              onChange={handleAnswerChange}\r\n            />\r\n            <label htmlFor={`option${index}`}>\r\n              {typeof option === 'object' ? (\r\n                <img src={option.img_url} alt={`Option ${index}`} />\r\n              ) : (\r\n                option\r\n              )}\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"navigation-section\">\r\n        {currentQuestion > 0 && (\r\n          <button onClick={() => setCurrentQuestion(prevQuestion => prevQuestion - 1)}>\r\n            Previous\r\n          </button>\r\n        )}\r\n        {currentQuestion < questions.length - 1 ? (\r\n          <button onClick={handleNextQuestion}>Next</button>\r\n        ) : (\r\n          <button onClick={handleTestEnd}>Submit</button>\r\n        )}\r\n        <button onClick={handleMarkQuestion}>Mark for Review</button>\r\n      </div>\r\n      <div className=\"timer-section\">\r\n        Time left: {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}\r\n      </div>\r\n      <div className=\"progress-bar\">\r\n        <div\r\n          className=\"progress-bar-fill\"\r\n          style={{ width: `${progressPercentage}%` }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"question-palette\">\r\n        {questions.map((_, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleQuestionPaletteClick(index)}\r\n            className={`palette-button ${\r\n              userResponses[index] !== undefined ? 'answered' : ''\r\n            } ${markedQuestions.includes(index) ? 'marked' : ''}`}\r\n          >\r\n            {index + 1}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MockTest;\r\n","import React from 'react';\r\nimport './Result.css';\r\n\r\nfunction Result({ score, totalQuestions, userResponses, questions, onGoBack }) {\r\n  const percentage = (score / totalQuestions) * 100;\r\n\r\n  return (\r\n    <div className=\"result-container\">\r\n      <h2>Test Results</h2>\r\n      <div className=\"score-summary\">\r\n        <p>You scored {score} out of {totalQuestions} questions.</p>\r\n        <p>Percentage: {percentage.toFixed(2)}%</p>\r\n      </div>\r\n      <div className=\"analysis\">\r\n        <h3>Detailed Analysis</h3>\r\n        {questions.map((question, index) => (\r\n          <div key={index} className=\"question-analysis\">\r\n            <h4>Question {index + 1}</h4>\r\n            <p>Your Answer: {question.options[userResponses[index]]}</p>\r\n            <p>Correct Answer: {question.options[question.correct_answer]}</p>\r\n            {userResponses[index] !== question.correct_answer && (\r\n              <div className=\"solution\">\r\n                <h5>Solution:</h5>\r\n                <p>{question.solution}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={onGoBack}>Go Back</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MockTest from './MockTest';\r\nimport Result from './Result';\r\nimport './Homepage.css';\r\n\r\nfunction Homepage({ questions }) {\r\n  const navigate = useNavigate();\r\n  const [selectedTest, setSelectedTest] = useState(null);\r\n  const [showTest, setShowTest] = useState(false);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [userResponses, setUserResponses] = useState([]);\r\n\r\n  const handleTestSelect = (test) => {\r\n    setSelectedTest(test);\r\n    setShowTest(true);\r\n  };\r\n\r\n  const handleTestEnd = (testScore, responses) => {\r\n    setScore(testScore);\r\n    setUserResponses(responses);\r\n    setShowTest(false);\r\n    setShowResult(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    setShowResult(false);\r\n    setSelectedTest(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"homepage-container\">\r\n      {!showTest && !showResult && (\r\n        <div className=\"test-selection\">\r\n          <h2>Select a Mock Test</h2>\r\n          {Object.keys(questions).map((test) => (\r\n            <button key={test} onClick={() => handleTestSelect(test)}>\r\n              {test}\r\n            </button>\r\n          ))}\r\n          <button onClick={() => navigate('/question-bank')}>\r\n            Question Bank\r\n          </button>\r\n        </div>\r\n      )}\r\n      {showTest && selectedTest && (\r\n        <MockTest\r\n          questions={questions[selectedTest]}\r\n          onTestEnd={handleTestEnd}\r\n        />\r\n      )}\r\n      {showResult && (\r\n        <Result\r\n          score={score}\r\n          totalQuestions={questions[selectedTest].length}\r\n          userResponses={userResponses}\r\n          questions={questions[selectedTest]}\r\n          onGoBack={handleGoBack}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './QuestionBank.css';\r\n\r\nfunction QuestionBank({ questions }) {\r\n  const [selectedSubject, setSelectedSubject] = useState(null);\r\n  const [selectedTopic, setSelectedTopic] = useState(null);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const filtered = Object.values(questions)\r\n      .flat()\r\n      .filter(question => {\r\n        if (selectedSubject && question.subject !== selectedSubject) {\r\n          return false;\r\n        }\r\n        if (selectedTopic && question.topic !== selectedTopic) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    setFilteredQuestions(filtered);\r\n  }, [questions, selectedSubject, selectedTopic]);\r\n\r\n  const handleSubjectChange = (event) => {\r\n    setSelectedSubject(event.target.value);\r\n    setSelectedTopic(null); // Reset topic when subject changes\r\n  };\r\n\r\n  const handleTopicChange = (event) => {\r\n    setSelectedTopic(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-bank-container\">\r\n      <h2>Question Bank</h2>\r\n      <div className=\"filters\">\r\n        <div>\r\n          <label htmlFor=\"subject\">Subject:</label>\r\n          <select id=\"subject\" value={selectedSubject || ''} onChange={handleSubjectChange}>\r\n            <option value=\"\">All</option>\r\n            <option value=\"Physics\">Physics</option>\r\n            <option value=\"Chemistry\">Chemistry</option>\r\n            <option value=\"Mathematics\">Mathematics</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"topic\">Topic:</label>\r\n          <select id=\"topic\" value={selectedTopic || ''} onChange={handleTopicChange}>\r\n            <option value=\"\">All</option>\r\n            {selectedSubject === 'Physics' && (\r\n              <>\r\n                <option value=\"Mechanics\">Mechanics</option>\r\n                <option value=\"Thermodynamics\">Thermodynamics</option>\r\n              </>\r\n            )}\r\n            {selectedSubject === 'Chemistry' && (\r\n              <>\r\n                <option value=\"Organic Chemistry\">Organic Chemistry</option>\r\n                <option value=\"Inorganic Chemistry\">Inorganic Chemistry</option>\r\n              </>\r\n            )}\r\n            {selectedSubject === 'Mathematics' && (\r\n              <>\r\n                <option value=\"Calculus\">Calculus</option>\r\n                <option value=\"Algebra\">Algebra</option>\r\n              </>\r\n            )}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"question-list\">\r\n        {filteredQuestions.map((question, index) => (\r\n          <div key={index} className=\"question-item\">\r\n            <div className=\"question-header\">\r\n              <span className=\"question-number\">Question {question.question_number}</span>\r\n              <span className=\"question-subject\">{question.subject}</span>\r\n            </div>\r\n            <div className=\"question-text\">{question.question_value.text}</div>\r\n            {question.question_value.img_url && (\r\n              <img src={question.question_value.img_url} alt=\"Question Illustration\" />\r\n            )}\r\n            <details>\r\n              <summary>View Solution</summary>\r\n              <div className=\"solution\">{question.solution}</div>\r\n            </details>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionBank;\r\n","// Function to load question data from JSON files\r\nexport const loadQuestions = async () => {\r\n  try {\r\n    const questions = {};\r\n    \r\n    // Replace with your actual file paths and fetching logic\r\n    const response2024 = await fetch('/2024_mains.json');\r\n    const data2024 = await response2024.json();\r\n    questions['2024 Mains'] = data2024;\r\n\r\n    const response2023 = await fetch('/2023_mains.json');\r\n    const data2023 = await response2023.json();\r\n    questions['2023 Mains'] = data2023;\r\n\r\n    // Add additional question sets as needed\r\n    // Example:\r\n    // const response2022 = await fetch('/2022_mains.json');\r\n    // const data2022 = await response2022.json();\r\n    // questions['2022 Mains'] = data2022;\r\n\r\n    return questions;\r\n  } catch (error) {\r\n    console.error('Error loading questions:', error);\r\n    return {};\r\n  }\r\n};\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport { HashRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport Homepage from './components/Homepage';\r\nimport QuestionBank from './components/QuestionBank';\r\nimport { loadQuestions } from './utils/questionLoader';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [questions, setQuestions] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      const loadedQuestions = await loadQuestions();\r\n      setQuestions(loadedQuestions);\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"app-container\">\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/question-bank\">Question Bank</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Homepage questions={questions} />} />\r\n          <Route path=\"/question-bank\" element={<QuestionBank questions={questions} />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}