{"version":3,"sources":["components/MockTest.js","components/Result.js","components/Homepage.js","components/QuestionBank.js","utils/questionLoader.js","App.js","index.js"],"names":["MockTest","_ref","questions","onTestEnd","markedQuestions","setMarkedQuestions","useState","React","createElement","className","map","_","index","key","onClick","questionIndex","setCurrentQuestion","setSelectedAnswer","userResponses","handleQuestionPaletteClick","undefined","includes","handleMarkQuestion","prevMarked","currentQuestion","filter","Result","score","totalQuestions","onGoBack","percentage","toFixed","question","options","correct_answer","solution","Homepage","navigate","useNavigate","selectedTest","setSelectedTest","showTest","setShowTest","showResult","setShowResult","setScore","setUserResponses","Object","keys","test","handleTestSelect","handleTestEnd","testScore","responses","length","handleGoBack","QuestionBank","selectedSubject","setSelectedSubject","selectedTopic","setSelectedTopic","filteredQuestions","setFilteredQuestions","useEffect","filtered","values","flat","subject","topic","htmlFor","id","value","onChange","event","target","Fragment","question_number","question_value","text","img_url","src","alt","loadQuestions","async","response2024","fetch","data2024","json","response2023","data2023","error","console","App","setQuestions","loadedQuestions","fetchQuestions","Router","basename","process","Link","to","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5c8c3673.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MockTest.css';\r\n\r\nfunction MockTest({ questions, onTestEnd }) {\r\n\t\r\n\t\r\n\t// ... (previous code)\r\n\r\n  // ... (other state variables)\r\n  const [markedQuestions, setMarkedQuestions] = useState([]);\r\n\r\n  // ... (other functions)\r\n\r\n  const handleQuestionPaletteClick = (questionIndex) => {\r\n    setCurrentQuestion(questionIndex);\r\n    setSelectedAnswer(userResponses[questionIndex]);\r\n  };\r\n\r\n  const handleMarkQuestion = () => {\r\n    setMarkedQuestions(prevMarked => {\r\n      if (prevMarked.includes(currentQuestion)) {\r\n        return prevMarked.filter(index => index !== currentQuestion);\r\n      } else {\r\n        return [...prevMarked, currentQuestion];\r\n      }\r\n    });\r\n  };\r\n\r\n  // ... (rest of the component code)\r\n\r\n  return (\r\n    <div className=\"mock-test-container\">\r\n      {/* ... (other sections) */}\r\n\r\n      <div className=\"question-palette\">\r\n        {questions.map((_, index) => (\r\n          <button\r\n            key={index}\r\n            onClick={() => handleQuestionPaletteClick(index)}\r\n            className={`palette-button ${\r\n              userResponses[index] !== undefined ? 'answered' : ''\r\n            } ${markedQuestions.includes(index) ? 'marked' : ''}`}\r\n          >\r\n            {index + 1}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* ... (rest of the component code) */}\r\n\r\n      <div className=\"navigation-section\">\r\n        {/* ... (previous buttons) */}\r\n        <button onClick={handleMarkQuestion}>Mark for Review</button>\r\n      </div>\r\n\r\n      {/* ... (rest of the component code) */}\r\n    </div>\r\n  );\r\n\r\n\t\r\n\t\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [timeLeft, setTimeLeft] = useState(1800); // 30 minutes in seconds\r\n  const [userResponses, setUserResponses] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setTimeLeft(prevTime => prevTime - 1);\r\n    }, 1000);\r\n\r\n    if (timeLeft === 0) {\r\n      clearInterval(timer);\r\n      handleTestEnd();\r\n    }\r\n\r\n    return () => clearInterval(timer);\r\n  }, [timeLeft, handleTestEnd]);\r\n\r\n  const handleAnswerChange = (event) => {\r\n    setSelectedAnswer(parseInt(event.target.value, 10));\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    setUserResponses(prevResponses => {\r\n      const newResponses = [...prevResponses];\r\n      newResponses[currentQuestion] = selectedAnswer;\r\n      return newResponses;\r\n    });\r\n\r\n    setSelectedAnswer(null);\r\n    setCurrentQuestion(prevQuestion => prevQuestion + 1);\r\n  };\r\n\r\n  const handleTestEnd = () => {\r\n    // Calculate score and pass responses to parent component\r\n    const score = userResponses.reduce((acc, response, index) => {\r\n      if (response === questions[index].correct_answer) {\r\n        return acc + 1;\r\n      }\r\n      return acc;\r\n    }, 0);\r\n\r\n    onTestEnd(score, userResponses);\r\n  };\r\n\r\n  if (!questions || questions.length === 0) {\r\n    return <div>Loading questions...</div>;\r\n  }\r\n\r\n  const question = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"mock-test-container\">\r\n      <div className=\"question-section\">\r\n        <div className=\"question-count\">\r\n          <span>Question {currentQuestion + 1}</span>/{questions.length}\r\n        </div>\r\n        <div className=\"question-text\">{question.question_value.text}</div>\r\n        {question.question_value.img_url && (\r\n          <img src={question.question_value.img_url} alt=\"Question Illustration\" />\r\n        )}\r\n      </div>\r\n      <div className=\"answer-section\">\r\n        {question.options.map((option, index) => (\r\n          <div key={index}>\r\n            <input\r\n              type=\"radio\"\r\n              id={`option${index}`}\r\n              name=\"answer\"\r\n              value={index}\r\n              checked={selectedAnswer === index}\r\n              onChange={handleAnswerChange}\r\n            />\r\n            <label htmlFor={`option${index}`}>\r\n              {typeof option === 'object' ? (\r\n                <img src={option.img_url} alt={`Option ${index}`} />\r\n              ) : (\r\n                option\r\n              )}\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"navigation-section\">\r\n        {currentQuestion > 0 && (\r\n          <button onClick={() => setCurrentQuestion(prevQuestion => prevQuestion - 1)}>\r\n            Previous\r\n          </button>\r\n        )}\r\n        {currentQuestion < questions.length - 1 ? (\r\n          <button onClick={handleNextQuestion}>Next</button>\r\n        ) : (\r\n          <button onClick={handleTestEnd}>Submit</button>\r\n        )}\r\n      </div>\r\n      <div className=\"timer-section\">\r\n        Time left: {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default MockTest;","import React from 'react';\r\nimport './Result.css';\r\n\r\nfunction Result({ score, totalQuestions, userResponses, questions, onGoBack }) {\r\n  const percentage = (score / totalQuestions) * 100;\r\n\r\n  return (\r\n    <div className=\"result-container\">\r\n      <h2>Test Results</h2>\r\n      <div className=\"score-summary\">\r\n        <p>You scored {score} out of {totalQuestions} questions.</p>\r\n        <p>Percentage: {percentage.toFixed(2)}%</p>\r\n      </div>\r\n      <div className=\"analysis\">\r\n        <h3>Detailed Analysis</h3>\r\n        {questions.map((question, index) => (\r\n          <div key={index} className=\"question-analysis\">\r\n            <h4>Question {index + 1}</h4>\r\n            <p>Your Answer: {question.options[userResponses[index]]}</p>\r\n            <p>Correct Answer: {question.options[question.correct_answer]}</p>\r\n            {userResponses[index] !== question.correct_answer && (\r\n              <div className=\"solution\">\r\n                <h5>Solution:</h5>\r\n                <p>{question.solution}</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={onGoBack}>Go Back</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport MockTest from './MockTest';\r\nimport Result from './Result';\r\nimport './Homepage.css';\r\n\r\nfunction Homepage({ questions }) {\r\n  const navigate = useNavigate();\r\n  const [selectedTest, setSelectedTest] = useState(null);\r\n  const [showTest, setShowTest] = useState(false);\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [userResponses, setUserResponses] = useState([]);\r\n\r\n  const handleTestSelect = (test) => {\r\n    setSelectedTest(test);\r\n    setShowTest(true);\r\n  };\r\n\r\n  const handleTestEnd = (testScore, responses) => {\r\n    setScore(testScore);\r\n    setUserResponses(responses);\r\n    setShowTest(false);\r\n    setShowResult(true);\r\n  };\r\n\r\n  const handleGoBack = () => {\r\n    setShowResult(false);\r\n    setSelectedTest(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"homepage-container\">\r\n      {!showTest && !showResult && (\r\n        <div className=\"test-selection\">\r\n          <h2>Select a Mock Test</h2>\r\n          {Object.keys(questions).map((test) => (\r\n            <button key={test} onClick={() => handleTestSelect(test)}>\r\n              {test}\r\n            </button>\r\n          ))}\r\n          <button onClick={() => navigate('/question-bank')}>\r\n            Question Bank\r\n          </button>\r\n        </div>\r\n      )}\r\n      {showTest && selectedTest && (\r\n        <MockTest\r\n          questions={questions[selectedTest]}\r\n          onTestEnd={handleTestEnd}\r\n        />\r\n      )}\r\n      {showResult && (\r\n        <Result\r\n          score={score}\r\n          totalQuestions={questions[selectedTest].length}\r\n          userResponses={userResponses}\r\n          questions={questions[selectedTest]}\r\n          onGoBack={handleGoBack}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './QuestionBank.css';\r\n\r\nfunction QuestionBank({ questions }) {\r\n  const [selectedSubject, setSelectedSubject] = useState(null);\r\n  const [selectedTopic, setSelectedTopic] = useState(null);\r\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const filtered = Object.values(questions)\r\n      .flat()\r\n      .filter(question => {\r\n        if (selectedSubject && question.subject !== selectedSubject) {\r\n          return false;\r\n        }\r\n        if (selectedTopic && question.topic !== selectedTopic) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    setFilteredQuestions(filtered);\r\n  }, [questions, selectedSubject, selectedTopic]);\r\n\r\n  const handleSubjectChange = (event) => {\r\n    setSelectedSubject(event.target.value);\r\n    setSelectedTopic(null); // Reset topic when subject changes\r\n  };\r\n\r\n  const handleTopicChange = (event) => {\r\n    setSelectedTopic(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"question-bank-container\">\r\n      <h2>Question Bank</h2>\r\n      <div className=\"filters\">\r\n        <div>\r\n          <label htmlFor=\"subject\">Subject:</label>\r\n          <select id=\"subject\" value={selectedSubject || ''} onChange={handleSubjectChange}>\r\n            <option value=\"\">All</option>\r\n            <option value=\"Physics\">Physics</option>\r\n            <option value=\"Chemistry\">Chemistry</option>\r\n            <option value=\"Mathematics\">Mathematics</option>\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"topic\">Topic:</label>\r\n          <select id=\"topic\" value={selectedTopic || ''} onChange={handleTopicChange}>\r\n            <option value=\"\">All</option>\r\n            {selectedSubject === 'Physics' && (\r\n              <>\r\n                <option value=\"Mechanics\">Mechanics</option>\r\n                <option value=\"Thermodynamics\">Thermodynamics</option>\r\n              </>\r\n            )}\r\n            {selectedSubject === 'Chemistry' && (\r\n              <>\r\n                <option value=\"Organic Chemistry\">Organic Chemistry</option>\r\n                <option value=\"Inorganic Chemistry\">Inorganic Chemistry</option>\r\n              </>\r\n            )}\r\n            {selectedSubject === 'Mathematics' && (\r\n              <>\r\n                <option value=\"Calculus\">Calculus</option>\r\n                <option value=\"Algebra\">Algebra</option>\r\n              </>\r\n            )}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"question-list\">\r\n        {filteredQuestions.map((question, index) => (\r\n          <div key={index} className=\"question-item\">\r\n            <div className=\"question-header\">\r\n              <span className=\"question-number\">Question {question.question_number}</span>\r\n              <span className=\"question-subject\">{question.subject}</span>\r\n            </div>\r\n            <div className=\"question-text\">{question.question_value.text}</div>\r\n            {question.question_value.img_url && (\r\n              <img src={question.question_value.img_url} alt=\"Question Illustration\" />\r\n            )}\r\n            <details>\r\n              <summary>View Solution</summary>\r\n              <div className=\"solution\">{question.solution}</div>\r\n            </details>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuestionBank;\r\n","// Function to load question data from JSON files\r\nexport const loadQuestions = async () => {\r\n  try {\r\n    const questions = {};\r\n    \r\n    // Replace with your actual file paths and fetching logic\r\n    const response2024 = await fetch('/2024_mains.json');\r\n    const data2024 = await response2024.json();\r\n    questions['2024 Mains'] = data2024;\r\n\r\n    const response2023 = await fetch('/2023_mains.json');\r\n    const data2023 = await response2023.json();\r\n    questions['2023 Mains'] = data2023;\r\n\r\n    // Add additional question sets as needed\r\n    // Example:\r\n    // const response2022 = await fetch('/2022_mains.json');\r\n    // const data2022 = await response2022.json();\r\n    // questions['2022 Mains'] = data2022;\r\n\r\n    return questions;\r\n  } catch (error) {\r\n    console.error('Error loading questions:', error);\r\n    return {};\r\n  }\r\n};\r\n","// src/App.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport Homepage from './components/Homepage';\r\nimport QuestionBank from './components/QuestionBank';\r\nimport { loadQuestions } from './utils/questionLoader';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [questions, setQuestions] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchQuestions = async () => {\r\n      const loadedQuestions = await loadQuestions();\r\n      setQuestions(loadedQuestions);\r\n    };\r\n\r\n    fetchQuestions();\r\n  }, []);\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <div className=\"app-container\">\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/question-bank\">Question Bank</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Homepage questions={questions} />} />\r\n          <Route path=\"/question-bank\" element={<QuestionBank questions={questions} />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}