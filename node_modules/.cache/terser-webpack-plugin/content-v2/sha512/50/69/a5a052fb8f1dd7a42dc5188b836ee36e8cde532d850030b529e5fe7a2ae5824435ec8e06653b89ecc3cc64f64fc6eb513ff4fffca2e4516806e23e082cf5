{"map":"{\"version\":3,\"sources\":[\"C:/Users/sriba/Documents/GitHub Repo Mocks/JeeMocks.github.io/src/components/MockTest.js\",\"C:/Users/sriba/Documents/GitHub Repo Mocks/JeeMocks.github.io/src/components/Result.js\",\"C:/Users/sriba/Documents/GitHub Repo Mocks/JeeMocks.github.io/src/components/Homepage.js\",\"C:/Users/sriba/Documents/GitHub Repo Mocks/JeeMocks.github.io/src/components/QuestionBank.js\",\"C:/Users/sriba/Documents/GitHub Repo Mocks/JeeMocks.github.io/src/utils/questionLoader.js\",\"C:/Users/sriba/Documents/GitHub Repo Mocks/JeeMocks.github.io/src/App.js\",\"C:/Users/sriba/Documents/GitHub Repo Mocks/JeeMocks.github.io/src/index.js\"],\"names\":[\"MockTest\",\"_ref\",\"questions\",\"onTestEnd\",\"markedQuestions\",\"setMarkedQuestions\",\"useState\",\"React\",\"createElement\",\"className\",\"map\",\"_\",\"index\",\"key\",\"onClick\",\"questionIndex\",\"setCurrentQuestion\",\"setSelectedAnswer\",\"userResponses\",\"handleQuestionPaletteClick\",\"undefined\",\"includes\",\"handleMarkQuestion\",\"prevMarked\",\"currentQuestion\",\"filter\",\"Result\",\"score\",\"totalQuestions\",\"onGoBack\",\"percentage\",\"toFixed\",\"question\",\"options\",\"correct_answer\",\"solution\",\"Homepage\",\"navigate\",\"useNavigate\",\"selectedTest\",\"setSelectedTest\",\"showTest\",\"setShowTest\",\"showResult\",\"setShowResult\",\"setScore\",\"setUserResponses\",\"Object\",\"keys\",\"test\",\"handleTestSelect\",\"handleTestEnd\",\"testScore\",\"responses\",\"length\",\"handleGoBack\",\"QuestionBank\",\"selectedSubject\",\"setSelectedSubject\",\"selectedTopic\",\"setSelectedTopic\",\"filteredQuestions\",\"setFilteredQuestions\",\"useEffect\",\"filtered\",\"values\",\"flat\",\"subject\",\"topic\",\"htmlFor\",\"id\",\"value\",\"onChange\",\"event\",\"target\",\"Fragment\",\"question_number\",\"question_value\",\"text\",\"img_url\",\"src\",\"alt\",\"loadQuestions\",\"async\",\"response2024\",\"fetch\",\"data2024\",\"json\",\"response2023\",\"data2023\",\"error\",\"console\",\"App\",\"setQuestions\",\"loadedQuestions\",\"fetchQuestions\",\"Router\",\"basename\",\"process\",\"Link\",\"to\",\"Routes\",\"Route\",\"path\",\"element\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState, useEffect } from 'react';\\r\\nimport './MockTest.css';\\r\\n\\r\\nfunction MockTest({ questions, onTestEnd }) {\\r\\n\\t\\r\\n\\t\\r\\n\\t// ... (previous code)\\r\\n\\r\\n  // ... (other state variables)\\r\\n  const [markedQuestions, setMarkedQuestions] = useState([]);\\r\\n\\r\\n  // ... (other functions)\\r\\n\\r\\n  const handleQuestionPaletteClick = (questionIndex) => {\\r\\n    setCurrentQuestion(questionIndex);\\r\\n    setSelectedAnswer(userResponses[questionIndex]);\\r\\n  };\\r\\n\\r\\n  const handleMarkQuestion = () => {\\r\\n    setMarkedQuestions(prevMarked => {\\r\\n      if (prevMarked.includes(currentQuestion)) {\\r\\n        return prevMarked.filter(index => index !== currentQuestion);\\r\\n      } else {\\r\\n        return [...prevMarked, currentQuestion];\\r\\n      }\\r\\n    });\\r\\n  };\\r\\n\\r\\n  // ... (rest of the component code)\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"mock-test-container\\\">\\r\\n      {/* ... (other sections) */}\\r\\n\\r\\n      <div className=\\\"question-palette\\\">\\r\\n        {questions.map((_, index) => (\\r\\n          <button\\r\\n            key={index}\\r\\n            onClick={() => handleQuestionPaletteClick(index)}\\r\\n            className={`palette-button ${\\r\\n              userResponses[index] !== undefined ? 'answered' : ''\\r\\n            } ${markedQuestions.includes(index) ? 'marked' : ''}`}\\r\\n          >\\r\\n            {index + 1}\\r\\n          </button>\\r\\n        ))}\\r\\n      </div>\\r\\n\\r\\n      {/* ... (rest of the component code) */}\\r\\n\\r\\n      <div className=\\\"navigation-section\\\">\\r\\n        {/* ... (previous buttons) */}\\r\\n        <button onClick={handleMarkQuestion}>Mark for Review</button>\\r\\n      </div>\\r\\n\\r\\n      {/* ... (rest of the component code) */}\\r\\n    </div>\\r\\n  );\\r\\n\\r\\n\\t\\r\\n\\t\\r\\n  const [currentQuestion, setCurrentQuestion] = useState(0);\\r\\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\\r\\n  const [timeLeft, setTimeLeft] = useState(1800); // 30 minutes in seconds\\r\\n  const [userResponses, setUserResponses] = useState([]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const timer = setInterval(() => {\\r\\n      setTimeLeft(prevTime => prevTime - 1);\\r\\n    }, 1000);\\r\\n\\r\\n    if (timeLeft === 0) {\\r\\n      clearInterval(timer);\\r\\n      handleTestEnd();\\r\\n    }\\r\\n\\r\\n    return () => clearInterval(timer);\\r\\n  }, [timeLeft, handleTestEnd]);\\r\\n\\r\\n  const handleAnswerChange = (event) => {\\r\\n    setSelectedAnswer(parseInt(event.target.value, 10));\\r\\n  };\\r\\n\\r\\n  const handleNextQuestion = () => {\\r\\n    setUserResponses(prevResponses => {\\r\\n      const newResponses = [...prevResponses];\\r\\n      newResponses[currentQuestion] = selectedAnswer;\\r\\n      return newResponses;\\r\\n    });\\r\\n\\r\\n    setSelectedAnswer(null);\\r\\n    setCurrentQuestion(prevQuestion => prevQuestion + 1);\\r\\n  };\\r\\n\\r\\n  const handleTestEnd = () => {\\r\\n    // Calculate score and pass responses to parent component\\r\\n    const score = userResponses.reduce((acc, response, index) => {\\r\\n      if (response === questions[index].correct_answer) {\\r\\n        return acc + 1;\\r\\n      }\\r\\n      return acc;\\r\\n    }, 0);\\r\\n\\r\\n    onTestEnd(score, userResponses);\\r\\n  };\\r\\n\\r\\n  if (!questions || questions.length === 0) {\\r\\n    return <div>Loading questions...</div>;\\r\\n  }\\r\\n\\r\\n  const question = questions[currentQuestion];\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"mock-test-container\\\">\\r\\n      <div className=\\\"question-section\\\">\\r\\n        <div className=\\\"question-count\\\">\\r\\n          <span>Question {currentQuestion + 1}</span>/{questions.length}\\r\\n        </div>\\r\\n        <div className=\\\"question-text\\\">{question.question_value.text}</div>\\r\\n        {question.question_value.img_url && (\\r\\n          <img src={question.question_value.img_url} alt=\\\"Question Illustration\\\" />\\r\\n        )}\\r\\n      </div>\\r\\n      <div className=\\\"answer-section\\\">\\r\\n        {question.options.map((option, index) => (\\r\\n          <div key={index}>\\r\\n            <input\\r\\n              type=\\\"radio\\\"\\r\\n              id={`option${index}`}\\r\\n              name=\\\"answer\\\"\\r\\n              value={index}\\r\\n              checked={selectedAnswer === index}\\r\\n              onChange={handleAnswerChange}\\r\\n            />\\r\\n            <label htmlFor={`option${index}`}>\\r\\n              {typeof option === 'object' ? (\\r\\n                <img src={option.img_url} alt={`Option ${index}`} />\\r\\n              ) : (\\r\\n                option\\r\\n              )}\\r\\n            </label>\\r\\n          </div>\\r\\n        ))}\\r\\n      </div>\\r\\n      <div className=\\\"navigation-section\\\">\\r\\n        {currentQuestion > 0 && (\\r\\n          <button onClick={() => setCurrentQuestion(prevQuestion => prevQuestion - 1)}>\\r\\n            Previous\\r\\n          </button>\\r\\n        )}\\r\\n        {currentQuestion < questions.length - 1 ? (\\r\\n          <button onClick={handleNextQuestion}>Next</button>\\r\\n        ) : (\\r\\n          <button onClick={handleTestEnd}>Submit</button>\\r\\n        )}\\r\\n      </div>\\r\\n      <div className=\\\"timer-section\\\">\\r\\n        Time left: {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nexport default MockTest;\",\"import React from 'react';\\r\\nimport './Result.css';\\r\\n\\r\\nfunction Result({ score, totalQuestions, userResponses, questions, onGoBack }) {\\r\\n  const percentage = (score / totalQuestions) * 100;\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"result-container\\\">\\r\\n      <h2>Test Results</h2>\\r\\n      <div className=\\\"score-summary\\\">\\r\\n        <p>You scored {score} out of {totalQuestions} questions.</p>\\r\\n        <p>Percentage: {percentage.toFixed(2)}%</p>\\r\\n      </div>\\r\\n      <div className=\\\"analysis\\\">\\r\\n        <h3>Detailed Analysis</h3>\\r\\n        {questions.map((question, index) => (\\r\\n          <div key={index} className=\\\"question-analysis\\\">\\r\\n            <h4>Question {index + 1}</h4>\\r\\n            <p>Your Answer: {question.options[userResponses[index]]}</p>\\r\\n            <p>Correct Answer: {question.options[question.correct_answer]}</p>\\r\\n            {userResponses[index] !== question.correct_answer && (\\r\\n              <div className=\\\"solution\\\">\\r\\n                <h5>Solution:</h5>\\r\\n                <p>{question.solution}</p>\\r\\n              </div>\\r\\n            )}\\r\\n          </div>\\r\\n        ))}\\r\\n      </div>\\r\\n      <button onClick={onGoBack}>Go Back</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Result;\\r\\n\",\"import React, { useState } from 'react';\\r\\nimport { useNavigate } from 'react-router-dom';\\r\\nimport MockTest from './MockTest';\\r\\nimport Result from './Result';\\r\\nimport './Homepage.css';\\r\\n\\r\\nfunction Homepage({ questions }) {\\r\\n  const navigate = useNavigate();\\r\\n  const [selectedTest, setSelectedTest] = useState(null);\\r\\n  const [showTest, setShowTest] = useState(false);\\r\\n  const [showResult, setShowResult] = useState(false);\\r\\n  const [score, setScore] = useState(0);\\r\\n  const [userResponses, setUserResponses] = useState([]);\\r\\n\\r\\n  const handleTestSelect = (test) => {\\r\\n    setSelectedTest(test);\\r\\n    setShowTest(true);\\r\\n  };\\r\\n\\r\\n  const handleTestEnd = (testScore, responses) => {\\r\\n    setScore(testScore);\\r\\n    setUserResponses(responses);\\r\\n    setShowTest(false);\\r\\n    setShowResult(true);\\r\\n  };\\r\\n\\r\\n  const handleGoBack = () => {\\r\\n    setShowResult(false);\\r\\n    setSelectedTest(null);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"homepage-container\\\">\\r\\n      {!showTest && !showResult && (\\r\\n        <div className=\\\"test-selection\\\">\\r\\n          <h2>Select a Mock Test</h2>\\r\\n          {Object.keys(questions).map((test) => (\\r\\n            <button key={test} onClick={() => handleTestSelect(test)}>\\r\\n              {test}\\r\\n            </button>\\r\\n          ))}\\r\\n          <button onClick={() => navigate('/question-bank')}>\\r\\n            Question Bank\\r\\n          </button>\\r\\n        </div>\\r\\n      )}\\r\\n      {showTest && selectedTest && (\\r\\n        <MockTest\\r\\n          questions={questions[selectedTest]}\\r\\n          onTestEnd={handleTestEnd}\\r\\n        />\\r\\n      )}\\r\\n      {showResult && (\\r\\n        <Result\\r\\n          score={score}\\r\\n          totalQuestions={questions[selectedTest].length}\\r\\n          userResponses={userResponses}\\r\\n          questions={questions[selectedTest]}\\r\\n          onGoBack={handleGoBack}\\r\\n        />\\r\\n      )}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Homepage;\\r\\n\",\"import React, { useState, useEffect } from 'react';\\r\\nimport './QuestionBank.css';\\r\\n\\r\\nfunction QuestionBank({ questions }) {\\r\\n  const [selectedSubject, setSelectedSubject] = useState(null);\\r\\n  const [selectedTopic, setSelectedTopic] = useState(null);\\r\\n  const [filteredQuestions, setFilteredQuestions] = useState([]);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const filtered = Object.values(questions)\\r\\n      .flat()\\r\\n      .filter(question => {\\r\\n        if (selectedSubject && question.subject !== selectedSubject) {\\r\\n          return false;\\r\\n        }\\r\\n        if (selectedTopic && question.topic !== selectedTopic) {\\r\\n          return false;\\r\\n        }\\r\\n        return true;\\r\\n      });\\r\\n    setFilteredQuestions(filtered);\\r\\n  }, [questions, selectedSubject, selectedTopic]);\\r\\n\\r\\n  const handleSubjectChange = (event) => {\\r\\n    setSelectedSubject(event.target.value);\\r\\n    setSelectedTopic(null); // Reset topic when subject changes\\r\\n  };\\r\\n\\r\\n  const handleTopicChange = (event) => {\\r\\n    setSelectedTopic(event.target.value);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"question-bank-container\\\">\\r\\n      <h2>Question Bank</h2>\\r\\n      <div className=\\\"filters\\\">\\r\\n        <div>\\r\\n          <label htmlFor=\\\"subject\\\">Subject:</label>\\r\\n          <select id=\\\"subject\\\" value={selectedSubject || ''} onChange={handleSubjectChange}>\\r\\n            <option value=\\\"\\\">All</option>\\r\\n            <option value=\\\"Physics\\\">Physics</option>\\r\\n            <option value=\\\"Chemistry\\\">Chemistry</option>\\r\\n            <option value=\\\"Mathematics\\\">Mathematics</option>\\r\\n          </select>\\r\\n        </div>\\r\\n        <div>\\r\\n          <label htmlFor=\\\"topic\\\">Topic:</label>\\r\\n          <select id=\\\"topic\\\" value={selectedTopic || ''} onChange={handleTopicChange}>\\r\\n            <option value=\\\"\\\">All</option>\\r\\n            {selectedSubject === 'Physics' && (\\r\\n              <>\\r\\n                <option value=\\\"Mechanics\\\">Mechanics</option>\\r\\n                <option value=\\\"Thermodynamics\\\">Thermodynamics</option>\\r\\n              </>\\r\\n            )}\\r\\n            {selectedSubject === 'Chemistry' && (\\r\\n              <>\\r\\n                <option value=\\\"Organic Chemistry\\\">Organic Chemistry</option>\\r\\n                <option value=\\\"Inorganic Chemistry\\\">Inorganic Chemistry</option>\\r\\n              </>\\r\\n            )}\\r\\n            {selectedSubject === 'Mathematics' && (\\r\\n              <>\\r\\n                <option value=\\\"Calculus\\\">Calculus</option>\\r\\n                <option value=\\\"Algebra\\\">Algebra</option>\\r\\n              </>\\r\\n            )}\\r\\n          </select>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div className=\\\"question-list\\\">\\r\\n        {filteredQuestions.map((question, index) => (\\r\\n          <div key={index} className=\\\"question-item\\\">\\r\\n            <div className=\\\"question-header\\\">\\r\\n              <span className=\\\"question-number\\\">Question {question.question_number}</span>\\r\\n              <span className=\\\"question-subject\\\">{question.subject}</span>\\r\\n            </div>\\r\\n            <div className=\\\"question-text\\\">{question.question_value.text}</div>\\r\\n            {question.question_value.img_url && (\\r\\n              <img src={question.question_value.img_url} alt=\\\"Question Illustration\\\" />\\r\\n            )}\\r\\n            <details>\\r\\n              <summary>View Solution</summary>\\r\\n              <div className=\\\"solution\\\">{question.solution}</div>\\r\\n            </details>\\r\\n          </div>\\r\\n        ))}\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default QuestionBank;\\r\\n\",\"// Function to load question data from JSON files\\r\\nexport const loadQuestions = async () => {\\r\\n  try {\\r\\n    const questions = {};\\r\\n    \\r\\n    // Replace with your actual file paths and fetching logic\\r\\n    const response2024 = await fetch('/2024_mains.json');\\r\\n    const data2024 = await response2024.json();\\r\\n    questions['2024 Mains'] = data2024;\\r\\n\\r\\n    const response2023 = await fetch('/2023_mains.json');\\r\\n    const data2023 = await response2023.json();\\r\\n    questions['2023 Mains'] = data2023;\\r\\n\\r\\n    // Add additional question sets as needed\\r\\n    // Example:\\r\\n    // const response2022 = await fetch('/2022_mains.json');\\r\\n    // const data2022 = await response2022.json();\\r\\n    // questions['2022 Mains'] = data2022;\\r\\n\\r\\n    return questions;\\r\\n  } catch (error) {\\r\\n    console.error('Error loading questions:', error);\\r\\n    return {};\\r\\n  }\\r\\n};\\r\\n\",\"// src/App.js\\r\\n\\r\\nimport React, { useState, useEffect } from 'react';\\r\\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\\r\\nimport Homepage from './components/Homepage';\\r\\nimport QuestionBank from './components/QuestionBank';\\r\\nimport { loadQuestions } from './utils/questionLoader';\\r\\nimport './App.css';\\r\\n\\r\\nfunction App() {\\r\\n  const [questions, setQuestions] = useState({});\\r\\n\\r\\n  useEffect(() => {\\r\\n    const fetchQuestions = async () => {\\r\\n      const loadedQuestions = await loadQuestions();\\r\\n      setQuestions(loadedQuestions);\\r\\n    };\\r\\n\\r\\n    fetchQuestions();\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <Router basename={process.env.PUBLIC_URL}>\\r\\n      <div className=\\\"app-container\\\">\\r\\n        <nav>\\r\\n          <ul>\\r\\n            <li>\\r\\n              <Link to=\\\"/\\\">Home</Link>\\r\\n            </li>\\r\\n            <li>\\r\\n              <Link to=\\\"/question-bank\\\">Question Bank</Link>\\r\\n            </li>\\r\\n          </ul>\\r\\n        </nav>\\r\\n        <Routes>\\r\\n          <Route path=\\\"/\\\" element={<Homepage questions={questions} />} />\\r\\n          <Route path=\\\"/question-bank\\\" element={<QuestionBank questions={questions} />} />\\r\\n        </Routes>\\r\\n      </div>\\r\\n    </Router>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default App;\\r\\n\",\"import React from 'react';\\r\\nimport ReactDOM from 'react-dom/client';\\r\\nimport './index.css';\\r\\nimport App from './App';\\r\\n\\r\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\r\\n\\r\\nroot.render(\\r\\n  <React.StrictMode>\\r\\n    <App />\\r\\n  </React.StrictMode>\\r\\n);\\r\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,function(e,t,a){e.exports=a(21)},,,,,,,,function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){},function(e,t,a){\"use strict\";a.r(t);var n=a(0),l=a.n(n),s=a(6),c=a.n(s),o=(a(15),a(3)),r=a(2);a(16);var i=function(e){let{questions:t,onTestEnd:a}=e;const[s,c]=Object(n.useState)([]);return l.a.createElement(\"div\",{className:\"mock-test-container\"},l.a.createElement(\"div\",{className:\"question-palette\"},t.map((e,t)=>l.a.createElement(\"button\",{key:t,onClick:()=>(e=>{setCurrentQuestion(e),setSelectedAnswer(userResponses[e])})(t),className:`palette-button ${void 0!==userResponses[t]?\"answered\":\"\"} ${s.includes(t)?\"marked\":\"\"}`},t+1))),l.a.createElement(\"div\",{className:\"navigation-section\"},l.a.createElement(\"button\",{onClick:()=>{c(e=>e.includes(currentQuestion)?e.filter(e=>e!==currentQuestion):[...e,currentQuestion])}},\"Mark for Review\")))};a(17);var u=function(e){let{score:t,totalQuestions:a,userResponses:n,questions:s,onGoBack:c}=e;const o=t/a*100;return l.a.createElement(\"div\",{className:\"result-container\"},l.a.createElement(\"h2\",null,\"Test Results\"),l.a.createElement(\"div\",{className:\"score-summary\"},l.a.createElement(\"p\",null,\"You scored \",t,\" out of \",a,\" questions.\"),l.a.createElement(\"p\",null,\"Percentage: \",o.toFixed(2),\"%\")),l.a.createElement(\"div\",{className:\"analysis\"},l.a.createElement(\"h3\",null,\"Detailed Analysis\"),s.map((e,t)=>l.a.createElement(\"div\",{key:t,className:\"question-analysis\"},l.a.createElement(\"h4\",null,\"Question \",t+1),l.a.createElement(\"p\",null,\"Your Answer: \",e.options[n[t]]),l.a.createElement(\"p\",null,\"Correct Answer: \",e.options[e.correct_answer]),n[t]!==e.correct_answer&&l.a.createElement(\"div\",{className:\"solution\"},l.a.createElement(\"h5\",null,\"Solution:\"),l.a.createElement(\"p\",null,e.solution))))),l.a.createElement(\"button\",{onClick:c},\"Go Back\"))};a(18);var m=function(e){let{questions:t}=e;const a=Object(r.o)(),[s,c]=Object(n.useState)(null),[o,m]=Object(n.useState)(!1),[E,v]=Object(n.useState)(!1),[p,d]=Object(n.useState)(0),[b,h]=Object(n.useState)([]);return l.a.createElement(\"div\",{className:\"homepage-container\"},!o&&!E&&l.a.createElement(\"div\",{className:\"test-selection\"},l.a.createElement(\"h2\",null,\"Select a Mock Test\"),Object.keys(t).map(e=>l.a.createElement(\"button\",{key:e,onClick:()=>(e=>{c(e),m(!0)})(e)},e)),l.a.createElement(\"button\",{onClick:()=>a(\"/question-bank\")},\"Question Bank\")),o&&s&&l.a.createElement(i,{questions:t[s],onTestEnd:(e,t)=>{d(e),h(t),m(!1),v(!0)}}),E&&l.a.createElement(u,{score:p,totalQuestions:t[s].length,userResponses:b,questions:t[s],onGoBack:()=>{v(!1),c(null)}}))};a(19);var E=function(e){let{questions:t}=e;const[a,s]=Object(n.useState)(null),[c,o]=Object(n.useState)(null),[r,i]=Object(n.useState)([]);return Object(n.useEffect)(()=>{const e=Object.values(t).flat().filter(e=>(!a||e.subject===a)&&(!c||e.topic===c));i(e)},[t,a,c]),l.a.createElement(\"div\",{className:\"question-bank-container\"},l.a.createElement(\"h2\",null,\"Question Bank\"),l.a.createElement(\"div\",{className:\"filters\"},l.a.createElement(\"div\",null,l.a.createElement(\"label\",{htmlFor:\"subject\"},\"Subject:\"),l.a.createElement(\"select\",{id:\"subject\",value:a||\"\",onChange:e=>{s(e.target.value),o(null)}},l.a.createElement(\"option\",{value:\"\"},\"All\"),l.a.createElement(\"option\",{value:\"Physics\"},\"Physics\"),l.a.createElement(\"option\",{value:\"Chemistry\"},\"Chemistry\"),l.a.createElement(\"option\",{value:\"Mathematics\"},\"Mathematics\"))),l.a.createElement(\"div\",null,l.a.createElement(\"label\",{htmlFor:\"topic\"},\"Topic:\"),l.a.createElement(\"select\",{id:\"topic\",value:c||\"\",onChange:e=>{o(e.target.value)}},l.a.createElement(\"option\",{value:\"\"},\"All\"),\"Physics\"===a&&l.a.createElement(l.a.Fragment,null,l.a.createElement(\"option\",{value:\"Mechanics\"},\"Mechanics\"),l.a.createElement(\"option\",{value:\"Thermodynamics\"},\"Thermodynamics\")),\"Chemistry\"===a&&l.a.createElement(l.a.Fragment,null,l.a.createElement(\"option\",{value:\"Organic Chemistry\"},\"Organic Chemistry\"),l.a.createElement(\"option\",{value:\"Inorganic Chemistry\"},\"Inorganic Chemistry\")),\"Mathematics\"===a&&l.a.createElement(l.a.Fragment,null,l.a.createElement(\"option\",{value:\"Calculus\"},\"Calculus\"),l.a.createElement(\"option\",{value:\"Algebra\"},\"Algebra\"))))),l.a.createElement(\"div\",{className:\"question-list\"},r.map((e,t)=>l.a.createElement(\"div\",{key:t,className:\"question-item\"},l.a.createElement(\"div\",{className:\"question-header\"},l.a.createElement(\"span\",{className:\"question-number\"},\"Question \",e.question_number),l.a.createElement(\"span\",{className:\"question-subject\"},e.subject)),l.a.createElement(\"div\",{className:\"question-text\"},e.question_value.text),e.question_value.img_url&&l.a.createElement(\"img\",{src:e.question_value.img_url,alt:\"Question Illustration\"}),l.a.createElement(\"details\",null,l.a.createElement(\"summary\",null,\"View Solution\"),l.a.createElement(\"div\",{className:\"solution\"},e.solution))))))};const v=async()=>{try{const t={},a=await fetch(\"/2024_mains.json\"),n=await a.json();t[\"2024 Mains\"]=n;const l=await fetch(\"/2023_mains.json\"),s=await l.json();return t[\"2023 Mains\"]=s,t}catch(e){return console.error(\"Error loading questions:\",e),{}}};a(20);var p=function(){const[e,t]=Object(n.useState)({});return Object(n.useEffect)(()=>{(async()=>{const e=await v();t(e)})()},[]),l.a.createElement(o.a,{basename:\"\"},l.a.createElement(\"div\",{className:\"app-container\"},l.a.createElement(\"nav\",null,l.a.createElement(\"ul\",null,l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"/\"},\"Home\")),l.a.createElement(\"li\",null,l.a.createElement(o.b,{to:\"/question-bank\"},\"Question Bank\")))),l.a.createElement(r.c,null,l.a.createElement(r.a,{path:\"/\",element:l.a.createElement(m,{questions:e})}),l.a.createElement(r.a,{path:\"/question-bank\",element:l.a.createElement(E,{questions:e})}))))};c.a.createRoot(document.getElementById(\"root\")).render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(p,null)))}],[[7,1,2]]]);","extractedComments":[]}